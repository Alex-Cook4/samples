namespace com.ibm.streamsx.geospatial.sample ;

use com.ibm.streamsx.messaging.kafka::KafkaProducer ;
use com.ibm.streamsx.hbase::* ;

composite GpsFromCustomerGenerator()
{
	param
		expression $minId : 10 ;
		expression $numEntities : 25 ;
		expression $minAge : 14 ;
		expression $maxAge : 99 ;
		expression $interestList : [ "Fashion", "Gadgets", "Furniture", "Jewelry",
			"Sports" ] ;
	graph
		(stream<rstring id, rstring wkt> GpsFromCellPhones_out0) as
			GpsFromCellPhones = Custom()
		{
			logic
				onProcess :
				{
					block(4.0) ; //wait for things to get started
					while(! isShutdown())
					{
						float64 latitude = randomLatitude(43.80792132384321, 43.8518832177072) ;
						float64 longitude = randomLongitude(- 79.52736854553223, -
							79.55174446105957) ;
						rstring id = randomId($minId, $numEntities) ;
						submit({ id = id, wkt = com.ibm.streams.geospatial.ext::point(longitude,
							latitude) }, GpsFromCellPhones_out0) ;
//						block(0.5) ;
					}

				}

		}

		() as KafkaProducer_8 = KafkaProducer(GpsFromCellPhones_out0)
		{
			param
				topic : "v_geofenceMarketingGPS" ;
				keyAttribute : "id" ;
				messageAttribute : "wkt" ;
				propertiesFile : "etc/producer.properties" ;
		}

		(stream<rstring id, rstring age, rstring gender, rstring interest>
			GeneratedProfile as O) as Beacon_3 = Custom()
		{
			logic
				onProcess :
				{
					for(int32 i in range($minId, $minId + $numEntities, 1))
					{
						rstring id = i ;
						rstring age = randomAge($minAge, $maxAge) ;
						rstring gender = randomGender() ;
						rstring interest = randomInterest($interestList) ;
						printStringLn("id: " + id + " age: " + age + " gender: " + gender +
							"interest:" + interest) ;
						submit({ id = id, age = age, gender = gender, interest = interest },
							GeneratedProfile) ;
					}

				}

		}

		() as putProfilesSink = HBASEPut(Functor_5_out0)
		{
			param
				rowAttrName : "id" ;
				tableName : "streamsCustomerProfiles" ;
				staticColumnFamily : "all" ;
				valueAttrName : "profileAttributes" ;
		}

		(stream<rstring id, tuple<rstring id, rstring age, rstring gender,
			rstring interest> profileAttributes> Functor_5_out0) as Functor_5 =
			Functor(GeneratedProfile)
		{
			output
				Functor_5_out0 : id = id, profileAttributes = GeneratedProfile ;
		}

		stream<rstring interest, tuple<rstring store, rstring offer> offerDetails>
			FileSource_12_out0 = FileSource()
		{
			param
				file : "offers.dat" ;
				format : csv ;
		}

		() as putOffersSink = HBASEPut(FileSource_12_out0)
		{
			param
				rowAttrName : "interest" ;
				tableName : "OffersBasedOnInterests" ;
				staticColumnFamily : "all" ;
				valueAttrName : "offerDetails" ;
		}

}