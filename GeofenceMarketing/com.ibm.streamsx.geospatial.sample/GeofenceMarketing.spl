
/* Copyright (C) 2015, International Business Machines Corporation  */
/* All Rights Reserved    
 * 
 */
namespace com.ibm.streamsx.geospatial.sample ;

use com.ibm.streams.geospatial::* ;
use com.ibm.streams.geospatial.ext::* ;
use com.ibm.streams.geospatial::Geofence ;
use com.ibm.streamsx.messaging.kafka::KafkaProducer ;
use com.ibm.streamsx.messaging.kafka::KafkaConsumer ;
use com.ibm.streamsx.hbase::* ;
use com.ibm.streamsx.hbase::HBASEGet ;
/**This application demonstrates the basic use of the GeoFence operator.
 * There are two data sources to this application:
 * * Randomized entities stream that simulates GPS data from cell phones
 * * A directory scan that watches the GeofenceMarketing/fences directory.  Initially, the directory contains csv file that contains geospatial data of shopping mall near Toronto.
 *   The DirectoryScan allows us to update geofences in the Geofence operator dynamically at runtime, wihtout having to restart the application. 
 * 
 * As data flows, the Geofence operator is set up to detect fenceEntry and fenceExit events.  When we detect an entity has entered a fenced area, the applicaiton
 * looks for marketing promotions from that area and sends the promotion info to the cell phone user.
 * 
 * To see this applicaiton in action, after you have launched the application, go to the following page in a browser:
 * http://<PE Host of MapViewer Operator>:8080/map/map.html?popup=true
 * 
 * */
composite GeofenceMarketingMain
{
	type
		Point = rstring id, rstring wkt ;
		FenceData = rstring fenceId, int32 fenceUpdateAction, rstring fencePolygon ;
		MatchedFences = tuple<list<rstring> fences, list<rstring> fencesEntered,
			list<rstring> fencesExited> ;
		Profile = rstring interest ;
		Offer = map<rstring, map<rstring, rstring>> results ;
	graph
		stream<FenceData> PolygonStream = FileSource(FenceDir)
		{
			param
				format : csv ;
		}

		stream<Point, MatchedFences> GeofenceEvents = Geofence(KafkaConsumer_9_out0
			as inPort0Alias ; PolygonStream)
		{
			param
				outputMode : events ;
				geometry : wkt ;
			output
				GeofenceEvents : fences = CurrentFences(), fencesEntered = FencesEntered(),
					fencesExited = FencesExited() ;
		}

		stream<MapViewerT> EntitiesWithPromotion = Functor(GetOfferBasedOnInterest as
			inPort0Alias)
		{
			logic
				state :
				{
					mutable rstring promotions = "" ;
				}

				onTuple inPort0Alias :
				{
					promotions = "" ;
					// if the entity has entered a geofence
					if(size(inPort0Alias.fencesEntered) > 0)
					{
					// for each geofence, find promotion and display on map
						for(int32 i in range(inPort0Alias.fencesEntered))
						{
							rstring location = inPort0Alias.fencesEntered [ i ] ;
							promotions = location ; //do this to kill warning for now. I don't like location being on the notification
							promotions = "<strong>Interests: " + interest + "</strong><br><br>" ;
							promotions +=
								"<img src=\"Award_small.png\" width=\"16\" height=\"16\">  " ;
							promotions += "<i>" + results [ "all" ] [ "store" ] + ":</i><br>" ;
							promotions += results [ "all" ] [ "offer" ] + "<br>" ;
						}

					}

				}

			output
				EntitiesWithPromotion : updateAction = 1u, note = promotions, markerType =
					GREEN ;
		}

		/** MapViewer makes use of the HTTPTupleView operator to allow us to visualize the data		
		in a browser.		
		*/
		() as MapViewer_7 = MapViewer(EntitiesWithPromotion, PolygonToMapViewer)
		{
		}

		(stream<MapViewerT> PolygonToMapViewer) = Custom(PolygonStream)
		{
			logic
				onTuple PolygonStream :
				{
					MapViewerT fencePt = { id = PolygonStream.fenceId, updateAction =(uint32)
						fenceUpdateAction, note = "FencePt", wkt = PolygonStream.fencePolygon,
						markerType = RED } ;
					submit(fencePt, PolygonToMapViewer) ;
				}

		}

		(stream<rstring filename> FenceDir) as FenceDirScan = DirectoryScan()
		{
			param
				directory : dataDirectory() + "/fences" ;
				initDelay : 3.0 ;
		}

		(stream<rstring id, rstring wkt> KafkaConsumer_9_out0) as KafkaConsumer_9 =
			KafkaConsumer()
		{
			param
				topic : "v_geofenceMarketingGPS" ;
				keyAttribute : "id" ;
				messageAttribute : "wkt" ;
				propertiesFile : "etc/consumer.properties" ;
				partition : 0 ;
		}

		stream<Point, MatchedFences, Profile> GetCustomerProfile =
			HBASEGet(GeofenceEvents)
		{
			param
				tableName : "streamsCustomerProfiles" ;
				rowAttrName : "id" ;
				staticColumnFamily : "all" ;
				staticColumnQualifier : "interest" ;
				outAttrName : "interest" ;
		}

		stream<Offer, Point, MatchedFences, Profile> GetOfferBasedOnInterest =
			HBASEGet(GetCustomerProfile as L)
		{
			param
				rowAttrName : "interest" ;
				tableName : "OffersBasedOnInterests" ;
				outAttrName : "results" ;
		}

		() as KafkaProducer_11 = KafkaProducer(Functor_13_out0 as inPort0Alias)
		{
			param
				topic : "v_offers" ;
				keyAttribute : "id" ;
				messageAttribute : "msg" ;
				propertiesFile : "etc/producer.properties" ;
		}

		@view(name = "OffersSent", port = Functor_12_out0, sampleSize = 200,
			bufferTime = 60.0, description = "Promotion offers sent to customers",
			activateOption = firstAccess)
		(stream<rstring id, rstring interest, rstring store, rstring offer>
			Functor_12_out0) as Functor_12 = Functor(GetOfferBasedOnInterest)
		{
			output
				Functor_12_out0 : offer = results [ "all" ] [ "offer" ], store = results [
					"all" ] [ "store" ], id = id, interest = interest ;
		}

		(stream<rstring id, rstring msg> Functor_13_out0) as Functor_13 =
			Functor(Functor_12_out0)
		{
			output
				Functor_13_out0 : msg =(rstring) Functor_12_out0 ;
		}

		(stream<rstring id, rstring msg> KafkaConsumerAccept_out0) as
			KafkaConsumerAccept = KafkaConsumer()
		{
			param
				topic : "v_offersAcceptance" ;
				keyAttribute : "id" ;
				messageAttribute : "msg" ;
				propertiesFile : "etc/consumer.properties" ;
				partition : 0 ;
		}

		(stream<rstring id, blob msg> Functor_14_out0) as Functor_14 =
			Functor(KafkaConsumerAccept_out0)
		{
			output
				Functor_14_out0 : msg = convertToBlob(msg) ;
		}

		(stream<rstring id, rstring interest, rstring store, rstring offer,
			boolean accept> Parse_15_out0) as Parse_15 = Parse(Functor_14_out0)
		{
			param
				format : txt ;
				parseInput : msg ;
		}

		@view(name = "offersAccepted", port = Split_16_out0, sampleSize = 200,
			bufferTime = 60.0, description = "Offers Accepted by Customers",
			activateOption = firstAccess)
		@view(name = "offersDeclined", port = Split_16_out1, sampleSize = 200,
			bufferTime = 60.0, description = "Offers declined by customers",
			activateOption = firstAccess)
		(stream<rstring id, rstring interest, rstring store, rstring offer,
			boolean accept> Split_16_out0 ; stream<rstring id, rstring interest,
			rstring store, rstring offer, boolean accept> Split_16_out1) as Split_16 =
			Split(Parse_15_out0)
		{
			param
				index : accept?0:1 ;
		}

		() as Custom_17 = Custom(Split_16_out0 as inputStream)
		{
			logic
				onTuple inputStream :
				{
				// Add code here

				}

		}

		() as Custom_18 = Custom(Split_16_out1 as inputStream)
		{
			logic
				onTuple inputStream :
				{
				// Add code here

				}

		}

}
